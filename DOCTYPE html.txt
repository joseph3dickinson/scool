<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Math Practice Challenge</title>
<style>
  body {
    font-family: Arial, sans-serif;
    background: #f0f4f8;
    margin: 0; padding: 0;
    display: flex; flex-direction: column; align-items: center;
    min-height: 100vh;
  }
  header {
    margin: 20px;
    text-align: center;
  }
  #math-ui {
    max-width: 400px;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgb(0 0 0 / 0.1);
  }
  button {
    background: #0057d9;
    color: white;
    border: none;
    padding: 10px 18px;
    font-size: 16px;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 15px;
  }
  button:hover {
    background: #003f9a;
  }
  #game-container {
    display: none;
    width: 98vw;
    height: 88vh;
    background: black;
    border: 4px solid #ccc;
    border-radius: 10px;
    box-sizing: border-box;
    margin-bottom: 20px;
  }
  canvas {
    display: block;
    width: 100%;
    height: 100%;
    background: linear-gradient(to bottom, #94d2ff 60%, #6b6b6b 40%);
  }
  footer {
    font-size: 12px;
    color: #555;
    margin-bottom: 20px;
  }
</style>
</head>
<body>

<header>
  <h1>Welcome to Math Practice Challenge</h1>
  <p>Practice your math skills, then take on the challenge!</p>
</header>

<div id="math-ui">
  <p>Solve this quick problem to start:</p>
  <p><strong>What is 7 × 8?</strong></p>
  <input type="number" id="answer" autocomplete="off" />
  <button id="start-btn" disabled>Start Math Challenge</button>
  <p id="feedback" style="color: red; height: 1.2em; margin-top: 8px;"></p>
</div>

<div id="game-container">
  <canvas id="gameCanvas"></canvas>
</div>

<footer>
  © 2025 Math Practice Challenge
</footer>

<script>
  const answerInput = document.getElementById('answer');
  const startBtn = document.getElementById('start-btn');
  const feedback = document.getElementById('feedback');
  const mathUI = document.getElementById('math-ui');
  const gameContainer = document.getElementById('game-container');
  const canvas = document.getElementById('gameCanvas');
  const ctx = canvas.getContext('2d');

  // Simple math check to enable start button
  answerInput.addEventListener('input', () => {
    if (parseInt(answerInput.value) === 56) {
      startBtn.disabled = false;
      feedback.textContent = '';
    } else {
      startBtn.disabled = true;
      if(answerInput.value !== '') feedback.textContent = 'Try again!';
      else feedback.textContent = '';
    }
  });

  startBtn.addEventListener('click', () => {
    mathUI.style.display = 'none';
    gameContainer.style.display = 'block';
    initGame();
  });

  // --------- GAME CODE START -----------

  function initGame() {
    // Resize canvas
    function resize() {
      canvas.width = window.innerWidth * 0.98 * 0.7;
      canvas.height = window.innerHeight * 0.88 * 0.7;
    }
    resize();
    window.addEventListener('resize', resize);

    // Game variables
    const MAP = { width: 2000, height: 1200 };
    let player = {
      x: MAP.width / 2,
      y: MAP.height / 2,
      angle: 0,
      speed: 230,
      health: 100,
      moving: { forward: false, back: false, left: false, right: false },
      sprinting: false,
    };
    const weapons = [
      { name: 'AR-15', damage: 20, rpm: 720, mag: 30, range: 900, spread: 6 },
      { name: 'Sniper', damage: 120, rpm: 40, mag: 5, range: 3000, spread: 0.6 },
      { name: 'Shotgun', damage: 12, pellets: 8, rpm: 70, mag: 8, range: 600, spread: 18 },
      { name: 'SMG', damage: 14, rpm: 900, mag: 40, range: 700, spread: 10 }
    ];
    let weaponIndex = 0;
    let ammoInfo = { ...weapons[weaponIndex], inMag: weapons[weaponIndex].mag, reserve: weapons[weaponIndex].mag * 3 };
    let bots = [];
    const maxBots = 8;
    let lastSpawn = 0;
    let lastShot = 0;
    let pointerLocked = false;
    let score = 0;

    // Helper funcs
    function rand(min, max) { return Math.random() * (max - min) + min; }
    function spawnBot() {
      const spawnEdge = Math.floor(Math.random() * 4);
      let x, y;
      if (spawnEdge === 0) { x = rand(0, MAP.width); y = -50; }
      if (spawnEdge === 1) { x = rand(0, MAP.width); y = MAP.height + 50; }
      if (spawnEdge === 2) { x = -50; y = rand(0, MAP.height); }
      if (spawnEdge === 3) { x = MAP.width + 50; y = rand(0, MAP.height); }
      bots.push({ x, y, health: 40, speed: rand(30, 60) });
    }
    function resetAmmoForWeapon(i) {
      const w = weapons[i];
      ammoInfo = { ...w, inMag: w.mag, reserve: w.mag * 3 };
    }

    // Controls
    window.addEventListener('keydown', e => {
      if (e.key === 'w') player.moving.forward = true;
      if (e.key === 's') player.moving.back = true;
      if (e.key === 'a') player.moving.left = true;
      if (e.key === 'd') player.moving.right = true;
      if (e.key === 'Shift') player.sprinting = true;
      if (e.key === '1') { weaponIndex = 0; resetAmmoForWeapon(weaponIndex); }
      if (e.key === '2') { weaponIndex = 1; resetAmmoForWeapon(weaponIndex); }
      if (e.key === '3') { weaponIndex = 2; resetAmmoForWeapon(weaponIndex); }
      if (e.key === '4') { weaponIndex = 3; resetAmmoForWeapon(weaponIndex); }
      if (e.key === 'r') reload();
    });
    window.addEventListener('keyup', e => {
      if (e.key === 'w') player.moving.forward = false;
      if (e.key === 's') player.moving.back = false;
      if (e.key === 'a') player.moving.left = false;
      if (e.key === 'd') player.moving.right = false;
      if (e.key === 'Shift') player.sprinting = false;
    });
    window.addEventListener('mousemove', e => {
      if (!pointerLocked) return;
      player.angle += e.movementX * 0.12;
      if (player.angle < 0) player.angle += 360;
      if (player.angle >= 360) player.angle -= 360;
    });
    canvas.onclick = () => { canvas.requestPointerLock(); };
    document.addEventListener('pointerlockchange', () => {
      pointerLocked = document.pointerLockElement === canvas;
    });
    window.addEventListener('mousedown', shoot);

    function reload() {
      const w = weapons[weaponIndex];
      const need = w.mag - ammoInfo.inMag;
      const take = Math.min(need, ammoInfo.reserve);
      ammoInfo.inMag += take;
      ammoInfo.reserve -= take;
    }

    function shoot() {
      const now = performance.now();
      const w = weapons[weaponIndex];
      const fireInterval = 60000 / w.rpm;
      if (now - lastShot < fireInterval) return;
      lastShot = now;
      if (ammoInfo.inMag <= 0) return;
      ammoInfo.inMag--;
      // hit bot logic
      for (let b of bots) {
        const vx = b.x - player.x;
        const vy = b.y - player.y;
        const dist = Math.hypot(vx, vy);
        if (dist > w.range) continue;
        let ang = Math.atan2(vy, vx) * 180 / Math.PI;
        let rel = ang - player.angle;
        if (rel < -180) rel += 360; if (rel > 180) rel -= 360;
        if (Math.abs(rel) <= (w.spread || 5)) {
          b.health -= w.damage;
          break;
        }
      }
    }

    function gameLoop() {
      const now = performance.now();
      const dt = 0.016; // fixed for simplicity

      // Move player
      const rad = player.angle * Math.PI / 180;
      let moveSpeed = player.speed * dt * (player.sprinting ? 1.7 : 1);
      let dx = 0, dy = 0;
      dx += (player.moving.forward ? 1 : 0) * Math.cos(rad) * moveSpeed;
      dy += (player.moving.forward ? 1 : 0) * Math.sin(rad) * moveSpeed;
      dx -= (player.moving.back ? 1 : 0) * Math.cos(rad) * moveSpeed;
      dy -= (player.moving.back ? 1 : 0) * Math.sin(rad) * moveSpeed;
      dx += (player.moving.right ? 1 : 0) * Math.sin(rad) * moveSpeed;
      dy -= (player.moving.right ? 1 : 0) * Math.cos(rad) * moveSpeed;
      dx -= (player.moving.left ? 1 : 0) * Math.sin(rad) * moveSpeed;
      dy += (player.moving.left ? 1 : 0) * Math.cos(rad) * moveSpeed;

      player.x = Math.min(MAP.width - 20, Math.max(20, player.x + dx));
      player.y = Math.min(MAP.height - 20, Math.max(20, player.y + dy));

      // Spawn bots
      if (now - lastSpawn > 1200 && bots.length < maxBots) {
        spawnBot();
        lastSpawn = now;
      }

      // Move bots & handle health
      for (let i = bots.length - 1; i >= 0; i--) {
        let b = bots[i];
        let vx = player.x - b.x;
        let vy = player.y - b.y;
        let dist = Math.hypot(vx, vy) + 0.001;
        b.x += (vx / dist) * b.speed * dt;
        b.y += (vy / dist) * b.speed * dt;
        if (dist < 40) {
          player.health -= 4;
          if (player.health <= 0) {
            player.health = 100;
            score = 0;
            bots = [];
            break;
          }
        }
        if (b.health <= 0) {
          bots.splice(i, 1);
          score++;
        }
      }

      // Draw
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Background (sky & ground)
      let sky = ctx.createLinearGradient(0, 0, 0, canvas.height * 0.6);
      sky.addColorStop(0, '#94d2ff');
      sky.addColorStop(1, '#cbe4ff');
      ctx.fillStyle = sky;
      ctx.fillRect(0, 0, canvas.width, canvas.height * 0.6);
      ctx.fillStyle = '#6b6b6b';
      ctx.fillRect(0, canvas.height * 0.6, canvas.width, canvas.height * 0.4);

      // Draw bots (Minecraft style)
      const FOV = 90;
      const halfFOV = FOV / 2;
      const screenCenterX = canvas.width / 2;
      const screenHorizon = canvas.height * 0.45;

      let visible = [];
      for (let b of bots) {
        let vx = b.x - player.x;
        let vy = b.y - player.y;
        let dist = Math.hypot(vx, vy);
        let ang = Math.atan2(vy, vx) * 180 / Math.PI;
        let rel = ang - player.angle;
        if (rel < -180) rel += 360;
        if (rel > 180) rel -= 360;
        if (Math.abs(rel) <= halfFOV && dist > 10) {
          visible.push({ bot: b, dist, rel });
        }
      }
      visible.sort((a, b) => b.dist - a.dist);

      for (let v of visible) {
        let { bot, dist, rel } = v;
        let px = screenCenterX + (rel / halfFOV) * (canvas.width * 0.45);
        let size = Math.max(8, (2000 / (dist + 30)) * 0.7);
        let headY = screenHorizon + (1 / Math.min(1, dist / 300)) * 30;

        // Blocky bot body & head
        ctx.fillStyle = '#b5651d';
        ctx.fillRect(px - size / 2, headY - size, size, size);
        ctx.fillStyle = '#f1c27d';
        ctx.fillRect(px - size / 2, headY - size * 1.5, size, size / 2);

        // Health bar
        let hpW = size;
        let hp = Math.max(0, bot.health) / 40;
        ctx.fillStyle = 'rgba(0,0,0,0.5)';
        ctx.fillRect(px - hpW / 2, headY - size - 12, hpW, 6);
        ctx.fillStyle = 'limegreen';
        ctx.fillRect(px - hpW / 2, headY - size - 12, hpW * hp, 6);
      }

      // Crosshair
      ctx.strokeStyle = 'white';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(canvas.width / 2 - 12, canvas.height / 2);
      ctx.lineTo(canvas.width / 2 + 12, canvas.height / 2);
      ctx.moveTo(canvas.width / 2, canvas.height / 2 - 12);
      ctx.lineTo(canvas.width / 2, canvas.height / 2 + 12);
      ctx.stroke();

      // HUD
      ctx.font = Math.max(12, canvas.width * 0.02) + 'px monospace';
      ctx.fillStyle = 'white';
      ctx.fillText(`${ammoInfo.name} [${ammoInfo.inMag} / ${ammoInfo.reserve}]`, 12, canvas.height - 24);
      ctx.fillText(`Health: ${Math.max(0, Math.round(player.health))}`, 12, canvas.height - 40);
      ctx.fillText(`Score: ${score}`, canvas.width - 120, 24);

      requestAnimationFrame(gameLoop);
    }

    gameLoop();
  }
</script>

</body>
</html>
